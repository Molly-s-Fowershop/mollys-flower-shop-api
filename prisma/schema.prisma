// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Clients

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  name             String
  lastname         String
  hashedPassword   String
  address          Address[]
  cart             Cart[]
  couponCodeUse    CouponCodeUse[]
  userNotification UserNotification[]

  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  wishList  Wishlist[]

  @@map("users")
}

model Address {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  street       String
  streetNumber String
  city         String
  state        String
  postalCode   String
  country      String
  orderItem    OrderItem[]

  updatedAt       DateTime          @updatedAt
  createdAt       DateTime          @default(now())
  DeliveryDetails DeliveryDetails[]
}

// Inventory

enum ProductType {
  STANDARD
  CUSTOMIZABLE
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  productDetails ProductDetails?
  orderItem      OrderItem[]
  cartItem       CartItem[]
  media          Media[]
  categoryId     Int
  category       Category?       @relation(fields: [categoryId], references: [id])
  productOffers  ProductOffer[]

  subCategories      Subcategory[]
  wishListItem       WishlistItem[]
  customizationGroup CustomizationGroup[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model ProductDetails {
  id          Int         @id @default(autoincrement())
  product     Product     @relation(fields: [productId], references: [id])
  productId   Int         @unique
  price       Float
  stock       Int
  type        ProductType @default(STANDARD)
  limitPerDay Int?
  Media       Media[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Category {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  products       Product[]
  subcategories  Subcategory[]
  categoryOffers CategoryOffer[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  products    Product[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Product Customization

model CustomizationGroup {
  id            Int             @id @default(autoincrement())
  name          String
  customization Customization[]
  products      Product[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Customization {
  id                   Int                @id @default(autoincrement())
  name                 String
  price                Float
  customizationGroupId Int
  customizationGroup   CustomizationGroup @relation(fields: [customizationGroupId], references: [id])
  cartItem             CartItem[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Orders

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  couponId  Int?
  orderItem OrderItem[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model OrderItem {
  id              Int               @id @default(autoincrement())
  orderId         Int
  order           Order             @relation(fields: [orderId], references: [id])
  productId       Int
  product         Product           @relation(fields: [productId], references: [id])
  quantity        Int
  deliveryDetails DeliveryDetails[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  Address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?
}

model DeliveryDetails {
  id                Int       @id @default(autoincrement())
  itemId            Int
  item              OrderItem @relation(fields: [itemId], references: [id])
  deliverDate       DateTime
  deliverTime       String
  deliveryAddressId Int?
  deliveryAddress   Address?  @relation(fields: [deliveryAddressId], references: [id])
}

// Carts

model Cart {
  id       Int        @id @default(autoincrement())
  userId   Int
  user     User       @relation(fields: [userId], references: [id])
  cartItem CartItem[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model CartItem {
  id             Int             @id @default(autoincrement())
  cartId         Int
  cart           Cart            @relation(fields: [cartId], references: [id])
  productId      Int
  product        Product         @relation(fields: [productId], references: [id])
  quantity       Int
  customizations Customization[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Offers and Coupons

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

enum OfferContextType {
  PRODUCT
  CATEGORY
}

model Offer {
  id            Int              @id @default(autoincrement())
  name          String
  description   String
  maxUses       Int
  discountType  DiscountType
  discountValue Float
  isAvailable   Boolean
  startDate     DateTime
  endDate       DateTime
  offerContext  OfferContextType
  couponCode    CouponCode[]
  media         Media[]

  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  ProductOffer  ProductOffer[]
  CategoryOffer CategoryOffer[]
}

model ProductOffer {
  id        Int     @id @default(autoincrement())
  offerId   Int
  offer     Offer   @relation(fields: [offerId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model CategoryOffer {
  id         Int      @id @default(autoincrement())
  offerId    Int
  offer      Offer    @relation(fields: [offerId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model CouponCode {
  id            Int             @id @default(autoincrement())
  code          String
  description   String
  offerId       Int
  offer         Offer           @relation(fields: [offerId], references: [id])
  couponCodeUse CouponCodeUse[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model CouponCodeUse {
  id       Int        @id @default(autoincrement())
  couponId Int
  coupon   CouponCode @relation(fields: [couponId], references: [id])
  userId   Int
  user     User       @relation(fields: [userId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Media

enum MediaContextType {
  PRODUCT
  CATEGORY
  OFFER
  USER
}

model Media {
  id               Int              @id @default(autoincrement())
  url              String
  context          MediaContextType
  products         Product[]
  offers           Offer[]
  ProductDetails   ProductDetails?  @relation(fields: [productDetailsId], references: [id])
  productDetailsId Int?
}

// Notifications

enum NotificationType {
  ORDER
  OFFER
  COUPON
}

model Notification {
  id                    Int                     @id @default(autoincrement())
  title                 String
  content               String
  type                  NotificationType
  sentAt                DateTime
  userNotification      UserNotification[]
  broadcastNotification BroadcastNotification[]
}

model UserNotification {
  id             Int          @id @default(autoincrement())
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  notificationId Int
  notification   Notification @relation(fields: [notificationId], references: [id])
}

model BroadcastNotification {
  id             Int          @id @default(autoincrement())
  notificationId Int
  notification   Notification @relation(fields: [notificationId], references: [id])
  expiresAt      DateTime?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Wishlist

model Wishlist {
  id     Int            @id @default(autoincrement())
  userId Int
  user   User           @relation(fields: [userId], references: [id])
  items  WishlistItem[]
}

model WishlistItem {
  wishlistId Int
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int

  @@id(name: "id", [wishlistId, productId])
}
